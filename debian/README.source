btsync for Debian
=================


Overview
--------

[BitTorrent Sync][BTSYNC] is a closed-source file synchronization server from
BitTorrent Inc, who distribute a compiled binary, but not Debian packages.

This project takes that binary and builds a Debian package from it.  It's
specialized to only package the amd64 binary because that's all I needed
personally.

[BTSYNC]: http://getsync.com


Disclaimer
----------

- **I don't use this project anymore**.
- **It may have some defects**.

This is a project I made for my own personal use.  Shortly after finishing it,
I was pointed to [Syncthing][THING], which is both free/open and already
packaged for Debian.  That said, this project will likely languish with time.
However, I tried hard to keep things simple.  So long as the upstream tarball
doesn't change that much, it shouldn't be difficult to update this project for
new versions.

I'm pretty sure this packaging is done well enough, but writing scripts for
package managers is easy to get wrong.  If you use this project, you should be
okay with the possibility of having to repair a script in /var/lib/dpkg/info in
case I made a mistake somewhere.

You'll probably be fine, but I want to be explicit about risk.

[THING]: https://syncthing.net/


Prerequisites
-------------

Debian allows you to build packages a lot of different ways.  I found the following
tools simple to use, and they're used in the instructions below:

- gitpkg
- cowbuilder

gitpkg will build DSC (Debian Source Control) files based on work checked
into a Git repository.  cowbuilder, will take these DSC files and use them to
build the final package in a chroot environment.  The chroot environment will
help ensure that all the necessary build dependencies are declared in the
control files.

If you know what you're doing, you're free to use other tools (sbuild,
pbuilder, cowpoke, dpkg-buildpackage, etc.).


Instructions for building
-------------------------

This project relies on setting up the project with some relative pathing.
Here's some steps that builds up a directory called "dpkg" in which we build
Debian packages.

Here's a few variables to set up paths:

```shell
DEB_ROOT="$(pwd)/dpkg"
DEB_PACKAGES="$DEB_ROOT/deb-packages"
BTSYNC_DEB="$DEB_ROOT/btsync"
BTSYNC_SOURCE="$DEB_PACKAGES/btsync"

BTSYNC_DEB_GIT="https://github.com/shajra/btsync-debian.git"
BTSYNC_DOWNLOAD_BASE="https://download-cdn.getsync.com/stable/linux-x64"
BTSYNC_DOWNLOAD_SRC="$BTSYNC_DOWNLOAD_BASE/BitTorrent-Sync_x64.tar.gz"
BTSYNC_DOWNLOAD_DEST="$BTSYNC_SOURCE/btsync.download.tar.gz"
```

Now, we'll set up these directories relative to the current working directory.

We'll also pull in the latest tarball from the Bittorrent Sync site and name it
according to the version of the binary included (which we cull from by calling
it with a help switch).

```shell
mkdir --parents "$BTSYNC_SOURCE"

git clone "$BTSYNC_DEB_GIT" "$BTSYNC_DEB"
curl "$BTSYNC_DOWNLOAD_SRC" > "$BTSYNC_DOWNLOAD_DEST"

DEB_TMP="$DEB_ROOT/tmp"
mkdir --parents "$DEB_TMP"
tar zxCf "$DEB_TMP" "$BTSYNC_DOWNLOAD_DEST"
BTSYNC_VERSION_ORIG="$("$DEB_TMP/btsync" --help \
    | grep ^BitTorrent \
    | head -1 \
    | perl -wln -e 'if (/([\d\.]+)\s+\((\d+)\)/) { print("$1.$2") }')"
mv $BTSYNC_DOWNLOAD_DEST "$BTSYNC_SOURCE/btsync_${BTSYNC_VERSION_ORIG}.orig.tar.gz"
rm -rf "$DEB_TMP"
```

Next we'll use gitpkg to build get the files we'll pass to cowbuilder.  We call
gitpkg with a tag pushed 

```shell
cd "$BTSYNC_DEB"
BTSYNC_TAG="$(git tag | grep ^release/ | sort -Vr | head -1)"
BTSYNC_VERSION="${BTSYNC_TAG##release/}"
gitpkg "$BTSYNC_TAG"
```

This will create a .dsc file and diff.gz under the deb-packages directory,
which we can then build with cowbuilder.

If you haven't run cowbuilder before, you need to create a chroot for it first:

```shell
sudo cowbuilder --create --distribution unstable
```

If you've already created it, you may want to update it:

```shell
sudo cowbuilder --update
```

Otherwise, we're ready to create our package:

```shell
sudo cowbuilder --build "${BTSYNC_SOURCE}/btsync_${BTSYNC_VERSION}.dsc"
```

You can test the integrity of the built package with lintian.

```shell
$ lintian /var/cache/pbuilder/result/btsync_${BTSYNC_VERSION}_amd64.deb
```

Lintian should report just one line of ignored (overridden) errors and
warnings.

Finally, you can install the package.


Updating the Project
--------------------

If a new upstream version is released, the version in the changelog will be out
of sync with the version in the downloaded tarball.  Ideally, all you have to
do is:

1. Update the changelog with a tool like debchange
2. Commit a tag to the git repository with the change

And the instructions above should guide you through the rest.


Other work
----------

Leo Moll has a [similar project with a similar name][2], but it's a lot more
ambitious in scope:

- packaging for more architectures
- providing a Python GUI for more of a desktop experience

It's possible to use the `btsync-common` package that excludes his new GUI, but
the project seems inactive now, and the published packages are out-of-date.

Ultimately, making proper Debian packages isn't too crazy, so I did the bare
minimum to meet my needs, while trying hard to keep most Debian Policy
compliance (some compliance is difficult because of the nature of the upstream
compilation).

[2]: https://github.com/tuxpoldo/btsync-deb
